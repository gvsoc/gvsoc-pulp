
/scratch/prasadar/chimera/chimera-snitch-cluster/chimera/sw/tests/testClusterOffload.memisl.elf:     file format elf32-littleriscv


Disassembly of section .text:

48000000 <__base_memisl>:

// Minimal CRT0
.global _start
_start:
    // Globally disable Machine and Supervisor interrupts
    csrrc x0, mstatus, 10
48000000:	30057073          	csrci	mstatus,10

    // Park SMP harts
    csrr t0, mhartid
48000004:	f14022f3          	csrr	t0,mhartid
    beqz t0, 2f
48000008:	00028663          	beqz	t0,48000014 <__base_memisl+0x14>
1:
    wfi
4800000c:	10500073          	wfi
    j 1b
48000010:	ffdff06f          	j	4800000c <__base_memisl+0xc>
2:
    // Init stack and global pointer iff linked as nonzero
    mv t1, sp
48000014:	00010313          	mv	t1,sp
    la t0, __stack_pointer$
48000018:	00000293          	li	t0,0
    beqz t0, 1f
4800001c:	00028463          	beqz	t0,48000024 <__base_memisl+0x24>
    mv sp, t0
48000020:	00028113          	mv	sp,t0
1:  .option push
    .option norelax
    la t0, __global_pointer$
48000024:	00000297          	auipc	t0,0x0
48000028:	2ec28293          	addi	t0,t0,748 # 48000310 <__global_pointer$>
    beqz t0, 1f
4800002c:	00028463          	beqz	t0,48000034 <__base_memisl+0x34>
    mv gp, t0
48000030:	00028193          	mv	gp,t0
1:  .option pop

    // Store existing stack, global, return pointers on new stack
    addi sp, sp, -12
48000034:	ff410113          	addi	sp,sp,-12
    sw t1, 0(sp)
48000038:	00612023          	sw	t1,0(sp)
    sw gp, 4(sp)
4800003c:	00312223          	sw	gp,4(sp)
    sw ra, 8(sp)
48000040:	00112423          	sw	ra,8(sp)

    // Set trap vector
    la t0, _trap_handler_wrap
48000044:	00000297          	auipc	t0,0x0
48000048:	08c28293          	addi	t0,t0,140 # 480000d0 <_trap_handler_wrap>
    csrrw x0, mtvec, t0
4800004c:	30529073          	csrw	mtvec,t0

    // Zero the .bss section
    la t0, __bss_start      // t0 = bss start address
48000050:	01018293          	addi	t0,gp,16 # 48000320 <__bss_end>
    la t1, __bss_end        // t1 = bss end address
48000054:	01018313          	addi	t1,gp,16 # 48000320 <__bss_end>
    sub t2, t1, t0          // t2 = #bytes to zero
48000058:	405303b3          	sub	t2,t1,t0
    li a0, 0
4800005c:	00000513          	li	a0,0

48000060 <_zero_bss_loop>:

_zero_bss_loop:
    addi t4, t2, -16
48000060:	ff038e93          	addi	t4,t2,-16
    blez t2, _fp_init           // t2 <= 0? => No bss to zero
48000064:	02705c63          	blez	t2,4800009c <_fp_init>
    blt t4, x0, _zero_bss_rem   // t4 <  0? => Less than 4 words left
48000068:	020ec263          	bltz	t4,4800008c <_zero_bss_rem>
    sw a0, 0(t0)
4800006c:	00a2a023          	sw	a0,0(t0)
    sw a0, 4(t0)
48000070:	00a2a223          	sw	a0,4(t0)
    sw a0, 8(t0)
48000074:	00a2a423          	sw	a0,8(t0)
    sw a0, 12(t0)
48000078:	00a2a623          	sw	a0,12(t0)
    addi t2, t2, -16
4800007c:	ff038393          	addi	t2,t2,-16
    addi t0, t0, 16
48000080:	01028293          	addi	t0,t0,16
    bgt t2, x0, _zero_bss_loop  // Still more to go
48000084:	fc704ee3          	bgtz	t2,48000060 <_zero_bss_loop>
    j _fp_init
48000088:	0140006f          	j	4800009c <_fp_init>

4800008c <_zero_bss_rem>:

_zero_bss_rem:
    sb a0, 0(t0)
4800008c:	00a28023          	sb	a0,0(t0)
    addi t2, t2, -1
48000090:	fff38393          	addi	t2,t2,-1
    addi t0, t0, 1
48000094:	00128293          	addi	t0,t0,1
    bgt t2, x0, _zero_bss_rem
48000098:	fe704ae3          	bgtz	t2,4800008c <_zero_bss_rem>

4800009c <_fp_init>:

_fp_init:
    // Full fence, then jump to main
    call main
4800009c:	1e4000ef          	jal	ra,48000280 <main>

480000a0 <_exit>:

// If main returns, we end up here
.global _exit
_exit:
    // Restore the original context registers (sp last)
    lw ra, 8(sp)
480000a0:	00812083          	lw	ra,8(sp)
    lw gp, 4(sp)
480000a4:	00412183          	lw	gp,4(sp)
    lw sp, 0(sp)
480000a8:	00012103          	lw	sp,0(sp)
    // Save the return value to scratch register 2 and wait forever.
    slli t0, a0, 1
480000ac:	00151293          	slli	t0,a0,0x1
    ori  t0, t0, 1
480000b0:	0012e293          	ori	t0,t0,1
    la t1, __base_regs
480000b4:	bb000317          	auipc	t1,0xbb000
480000b8:	f4c30313          	addi	t1,t1,-180 # 3000000 <__base_regs>
    sw t0, 8(t1)     // regs.SCRATCH[2]
480000bc:	00532423          	sw	t0,8(t1)
    // Hand over to whatever called us, passing return
    ret
480000c0:	00008067          	ret
480000c4:	00000013          	nop
480000c8:	00000013          	nop
480000cc:	00000013          	nop

480000d0 <_trap_handler_wrap>:

// This wraps the C trap handler to save the (integer-only) caller-save
// registers and perform a proper machine-mode exception return.
.align 4
_trap_handler_wrap:
    addi sp, sp, -64
480000d0:	fc010113          	addi	sp,sp,-64
    sw ra, 60(sp)
480000d4:	02112e23          	sw	ra,60(sp)
    sw t0, 56(sp)
480000d8:	02512c23          	sw	t0,56(sp)
    sw t1, 52(sp)
480000dc:	02612a23          	sw	t1,52(sp)
    sw t2, 48(sp)
480000e0:	02712823          	sw	t2,48(sp)
    sw a0, 44(sp)
480000e4:	02a12623          	sw	a0,44(sp)
    sw a1, 40(sp)
480000e8:	02b12423          	sw	a1,40(sp)
    sw a2, 36(sp)
480000ec:	02c12223          	sw	a2,36(sp)
    sw a3, 32(sp)
480000f0:	02d12023          	sw	a3,32(sp)
    sw a4, 28(sp)
480000f4:	00e12e23          	sw	a4,28(sp)
    sw a5, 24(sp)
480000f8:	00f12c23          	sw	a5,24(sp)
    sw a6, 20(sp)
480000fc:	01012a23          	sw	a6,20(sp)
    sw a7, 16(sp)
48000100:	01112823          	sw	a7,16(sp)
    sw t3, 12(sp)
48000104:	01c12623          	sw	t3,12(sp)
    sw t4, 8(sp)
48000108:	01d12423          	sw	t4,8(sp)
    sw t5, 4(sp)
4800010c:	01e12223          	sw	t5,4(sp)
    sw t6, 0(sp)
48000110:	01f12023          	sw	t6,0(sp)

    jal trap_vector
48000114:	04c000ef          	jal	ra,48000160 <trap_vector>

    lw ra, 60(sp)
48000118:	03c12083          	lw	ra,60(sp)
    lw t0, 56(sp)
4800011c:	03812283          	lw	t0,56(sp)
    lw t1, 52(sp)
48000120:	03412303          	lw	t1,52(sp)
    lw t2, 48(sp)
48000124:	03012383          	lw	t2,48(sp)
    lw a0, 44(sp)
48000128:	02c12503          	lw	a0,44(sp)
    lw a1, 40(sp)
4800012c:	02812583          	lw	a1,40(sp)
    lw a2, 36(sp)
48000130:	02412603          	lw	a2,36(sp)
    lw a3, 32(sp)
48000134:	02012683          	lw	a3,32(sp)
    lw a4, 28(sp)
48000138:	01c12703          	lw	a4,28(sp)
    lw a5, 24(sp)
4800013c:	01812783          	lw	a5,24(sp)
    lw a6, 20(sp)
48000140:	01412803          	lw	a6,20(sp)
    lw a7, 16(sp)
48000144:	01012883          	lw	a7,16(sp)
    lw t3, 12(sp)
48000148:	00c12e03          	lw	t3,12(sp)
    lw t4, 8(sp)
4800014c:	00812e83          	lw	t4,8(sp)
    lw t5, 4(sp)
48000150:	00412f03          	lw	t5,4(sp)
    lw t6, 0(sp)
48000154:	00012f83          	lw	t6,0(sp)
    addi sp, sp, 128
48000158:	08010113          	addi	sp,sp,128
    mret
4800015c:	30200073          	mret

48000160 <trap_vector>:

.global trap_vector
.weak trap_vector
trap_vector:
    j trap_vector
48000160:	0000006f          	j	48000160 <trap_vector>
	...

48000180 <clusterTrapHandler>:
48000180:	f14027f3          	csrr	a5,mhartid
48000184:	0ff7f793          	andi	a5,a5,255
48000188:	00279793          	slli	a5,a5,0x2
4800018c:	02040737          	lui	a4,0x2040
48000190:	00f707b3          	add	a5,a4,a5
48000194:	0007a023          	sw	zero,0(a5)
48000198:	00008067          	ret
	...

48000200 <testReturn>:
48000200:	050cd537          	lui	a0,0x50cd
48000204:	e5550513          	addi	a0,a0,-427 # 50cce55 <__base_plic+0x10cce55>
48000208:	00008067          	ret
	...

48000280 <main>:
48000280:	00000717          	auipc	a4,0x0
48000284:	00000797          	auipc	a5,0x0
48000288:	300016b7          	lui	a3,0x30001
4800028c:	f0070713          	addi	a4,a4,-256 # 48000180 <clusterTrapHandler>
48000290:	f7c78793          	addi	a5,a5,-132 # 48000200 <testReturn>
48000294:	00e6a223          	sw	a4,4(a3) # 30001004 <__base_spm+0x20001004>
48000298:	00f6a023          	sw	a5,0(a3)
4800029c:	30001737          	lui	a4,0x30001
480002a0:	00100793          	li	a5,1
480002a4:	04472683          	lw	a3,68(a4) # 30001044 <__base_spm+0x20001044>
480002a8:	fef68ee3          	beq	a3,a5,480002a4 <main+0x24>
480002ac:	3e800793          	li	a5,1000
480002b0:	00000013          	nop
480002b4:	fff78793          	addi	a5,a5,-1
480002b8:	fe079ce3          	bnez	a5,480002b0 <main+0x30>
480002bc:	020407b7          	lui	a5,0x2040
480002c0:	00100713          	li	a4,1
480002c4:	00e7a223          	sw	a4,4(a5) # 2040004 <__base_clint+0x4>
480002c8:	300017b7          	lui	a5,0x30001
480002cc:	0087a683          	lw	a3,8(a5) # 30001008 <__base_spm+0x20001008>
480002d0:	00878713          	addi	a4,a5,8
480002d4:	fe068ce3          	beqz	a3,480002cc <main+0x4c>
480002d8:	0087a503          	lw	a0,8(a5)
480002dc:	faf337b7          	lui	a5,0xfaf33
480002e0:	1ab78793          	addi	a5,a5,427 # faf331ab <__base_dram+0x7af331ab>
480002e4:	00f50533          	add	a0,a0,a5
480002e8:	00072023          	sw	zero,0(a4)
480002ec:	00a03533          	snez	a0,a0
480002f0:	00008067          	ret
	...
